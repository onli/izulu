#!/bin/bash

# izulu - Change the wallpaper according to the weather
#
# Copyright (C) 2009 Malte Paskuda
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the 
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License 
# along with this program; if not, see <http://www.gnu.org/licenses/>.

# get current weather
# $1: city to look for, or latitude
# $2 longitude, not needed if $1 was a city
# return: current weather
getWeather() {    
    echo "$WEATHER_DATA" | jq -r '.weather.icon'  # -r makes jq not put " around the string, which is important for the later ifs
}


# fill WEATHER_DATA with weather API result. NOTE: Always run this at top level, not in a subshell
# return: Weather api data (currently JSON)
setWeatherData() {
    local url="https://api.brightsky.dev/current_weather?lat=$LATITUDE&lon=$LONGITUDE"
    WEATHER_DATA=$(fetchUrl "$url")
}

# Set global LATITUDE and LONGITUDE, to be called at program start if not manually supplied
setCoordinates() {
    local coords=$(wget --user-agent="izulu" --method=POST -q -O - "https://api.beacondb.net/v1/geolocate?key=geoclue")
    LATITUDE=$(echo "$coords" | jq -r '.location.lat')
    LONGITUDE=$(echo "$coords" | jq -r '.location.lng')
}

# Download the given url, with a correct user agent set
fetchUrl() {
    echo $(wget --user-agent="izulu" -q -O - "$1")
}

# set the wallpaper according to the weather
# $1: current weather
chooseWallpaper() {
    local weather="$1"

    case "$weather" in
        # Sun:       
        "clear-day" | "clear-night")
            setWallpaper "clear" "gen_sun"
            ;;

        # Clouds:
        "partly-cloudy-day" | "partly-cloudy-night")
            setWallpaper "partly_cloudy" "gen_cloud"
            ;;

        "cloudy")
            setWallpaper "cloudy" "gen_cloud"
            ;;

        # "Rain")
        "rain")
            setWallpaper "rain" "gen_rain"
            ;;
        # "Hail")
        "hail")
            setWallpaper "hail" "gen_rain"
            ;;
        # "Thunderstorm")
        "thunderstorm") 
            setWallpaper "thunderstorm" "gen_thunder"
            ;;

        # Snow:
        "sleet")
            setWallpaper "sleet" "gen_snow"
            ;;
            
        "snow")
            setWallpaper "snow" "gen_snow"
            ;;

        # Wind:
        "wind")
            setWallpaper "windy" "gen_wind"
            ;;
        "tornado")
            setWallpaper "tornado" "gen_wind"
            ;;
       
        # Misc:
        "fog")
            setWallpaper "fog" "gen_misc"
            ;;
        *)
            setWallpaper "cloudy" "gen_cloud" #TODO: set a placeholder image here
            ;;
    esac
}

# Choose the wallpaper
# $1: the image for the specific state
# $2: the image for the generic state, fallback
# $3: If set to anything, random-mode will not be triggered 
setWallpaper() {
    if isNight;then
        specific="$1"_night.jpg
        generic="$2"_night.jpg
    else
        local specific="$1.jpg"
        local generic="$2.jpg"
    fi
    
    if [[ -n "$current" ]];then
        if [ "$current" == "$specific" ];then
            if [ ! "$TEMPERATURE" == "TRUE" ] ;then
                #no dynamic features, so no change necessary
                return
            fi
        fi
    fi
    current="$specific"
    
    if [[ -e "$HOME"/.izulu/"$specific" ]];then
        setImage "$HOME"/.izulu/"$specific" 
    else
        if [[ -e /usr/share/izulu/"$specific" ]];then
            setImage /usr/share/izulu/"$specific"
        else
            if [[ -e "$HOME"/.izulu/"$generic" ]];then
                setImage "$HOME"/.izulu/"$generic" 
            else
                setImage /usr/share/izulu/"$generic"
            fi
        fi
    fi
}

# set the Wallpaper
# $1 the wallpaperfile
setImage() {
    local tmpimage=$(mktemp)
    # store for later merge - and to be able to write
    cp "$1"  "$tmpimage"
    local resolution=$(xdpyinfo | grep dimensions | awk '{ print $2 }')
    convert "$tmpimage" -resize "$resolution" "$tmpimage"
    local weather="$(getWeather)"
    local trayicon="weather-clear"
    local traytext="$weather"
    
    if [ "$FORECAST" == "TRUE" ];then
        local url="https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=$LATITUDE&lon=$LONGITUDE"
        local forecastData=$(fetchUrl "$url")
        for i in {0..3};do
            # merge forecast-icons with background-image
            local icon=$(echo "$forecastData" | jq -r '.properties.timeseries['$(($i * 12))'].data.next_12_hours.summary.symbol_code')
            local tmpicon=$(mktemp --suffix=.png)
            cp "/usr/share/izulu/weathericons/$icon.png" "$tmpicon"
            if [ "$i" == 0 ];then
                trayicon="$(mktemp --suffix=.png)"
                convert "$tmpicon" -resize 16x16 -trim "$trayicon"
            fi
            convert "$tmpicon" -resize 64x64 "$tmpicon"
            
            # at least +20 y height to be above typical taskbar
            convert -depth 8 -gravity SouthEast -geometry +$((260-(i+1)*64))+30 "$tmpimage" "$tmpicon" -composite "$tmpimage"          
        done
    fi

    if [ "$TEMPERATURE" == "TRUE" ];then
        local temperature=$(echo "$WEATHER_DATA" | jq -r '.weather.temperature')
        traytext="$traytext, $temperature"
        convert "$tmpimage" \
            \( -size "90x60" -gravity NorthEast -background none -font DejaVu-Sans-Condensed -pointsize 36 -fill "#E4E4E4" -extent 95 caption:"${temperature%.*}Â°C" \
            \( +clone -background "#424242" -shadow 90x3-6+1 -gravity NorthEast \) +swap -background none -layers merge +repage \) \
            -gravity "$TEMPERATURE_GRAVITY" -composite "$tmpimage"
            
    fi
    cp "$tmpimage" "$HOME"/.izulu/izulucurrent
    rm "$tmpimage"
    if [  "${WPCOMMAND:${#WPCOMMAND}-1}" == "/" ];then
        ${WPCOMMAND}"$HOME/.izulu/izulucurrent" &
    else
        $WPCOMMAND "$HOME/.izulu/izulucurrent" &
    fi
    osdNotify $weather
    trayUpdate "$traytext" "$trayicon"    
}

contains() {
    list=("$1")
    element="$2"
    if [ "$(echo ${list[*]} | grep "$element")" == "" ];then
        return 1
    else
        return 0
    fi
}

# send onscreen-notfication if weather changed
# $1: message, new weather state
osdNotify() {
    if [ "$OSD" == "TRUE" ];then
        if [[ -z "$last_state" ]] || [ "$last_state" != "$1" ];then
            if command -v notify-send > /dev/null;then
               notify-send "izulu" "$(gettext "$1")"
            else
                echo "notify-send not installed, but osd via -o requested." \
                     "Install libnotify-bin to use the osd."
            fi
        fi
        last_state="$1"
    fi
}

# Create the tray icon, or update the tray icon if weather changed
# $1: traytext, new weather state to show
# $2: trayicon, new weather icon to show
trayUpdate() {
    if [ "$TRAYICON" == "TRUE" ];then
        if command -v yad > /dev/null;then
            if [[ -z "$last_tray_state" ]];then
                # The tray icon has not been created yet, which we will do now with the needed
                # pipe to update it later
                TRAYPIPE=$(mktemp)
                rm "$TRAYPIPE"
                mkfifo "$TRAYPIPE"
                exec 3<> "$TRAYPIPE"

                yad_cancel () {
                    kill -USR1 "$YAD_PID"  # remove the tray icon
                    kill -USR1 "$IZULU_PID"         # also end izulu
                }
                export -f yad_cancel
                export IZULU_PID
                
                yad --notification --image="$2" --command="echo 'Hello World'" --text="$1" --menu="Exit !bash -c 'yad_cancel'" --listen <&3 &
                unset yad-cancel
                unset IZULU_PID
            else
                if [ "$last_tray_state" != "$1" ];then
                    # We have new info to show in the tray icon
                    echo "icon:$2" >&3 
                    echo "tooltip:$1" >&3
                fi
            fi
        else
            echo "yad not installed, but tray icon via -i requested." \
                 "Install yad to show a tray ."
        fi
        
        last_tray_state="$1"
    fi
}



# Return true if we know it is night, and user did ctivate the night mode
# This will only work well if the local time is in the same timezone as the detected place
isNight() {
    current_time=$(date "+%s")
    local url="https://api.met.no/weatherapi/sunrise/3.0/sun?lat=$LATITUDE&lon=$LONGITUDE"
    local sunsetData=$(fetchUrl "$url")
    local sunrise=$(echo "$sunsetData" | jq -r '.properties.sunrise.time')
    local sunriseTimestamp=$(date "+%s" --date="$sunrise")
    local sunset=$(echo "$sunsetData" | jq -r '.properties.sunset.time')
    local sunsetTimestamp=$(date "+%s" --date="$sunset")

    return $(echo "(! ($current_time < $sunriseTimestamp || $current_time > $sunsetTimestamp))" | bc -l)
}

# Check in which environment we run to select a command to set a wallpaper
getWPCommand() {
    #partly taken from xdg-open
    if [ x"$DESKTOP_SESSION" = x"ubuntu"  ] || [ x"$DESKTOP_SESSION" = x"ubuntu-2d" ];then
        gsettings set org.gnome.desktop.background picture-options "stretched"
        echo "gsettings set org.gnome.desktop.background picture-uri file://"
    elif [ x"$GNOME_DESKTOP_SESSION_ID" != x"" ] || [ x"$DESKTOP_SESSION" = x"gnome" ];then
        if command -v gnome-about > /dev/null; then
            echo "gconftool --type string -s /desktop/gnome/background/picture_filename"
        else
            gsettings set org.gnome.desktop.background picture-options "stretched"
            echo "gsettings set org.gnome.desktop.background picture-uri file://"
        fi
    elif [ x"$XDG_CURRENT_DESKTOP" = x"MATE" ];then
        gsettings set org.mate.background picture-options "stretched"
        echo "gsettings set org.mate.background picture-filename"
    elif xprop -root _DT_SAVE_MODE | grep ' = \"xfce4\"$' >/dev/null 2>&1; then
        echo "xfdesktop --reload"
    elif command -v Esetroot > /dev/null; then
        echo "Esetroot -scale"
    elif command -v feh > /dev/null; then
        echo "feh --bg-scale  --no-fehbg"
    elif command -v display > /dev/null; then
        echo "display -window root"
    else
        echo "gconftool --type string -s /desktop/gnome/background/picture_filename"
    fi
}

checkConfig() {
    if [[ ! -d "$HOME/.izulu/" ]];then
        mkdir "$HOME/.izulu/"
    fi
    if [[ ! -e "$HOME/.izulu/config" ]];then
        echo "WPCOMMAND=\"\"   #command to set the wallpaper
LATITUDE=\"\"
LONGITUDE=\"\"
" > "$HOME/.izulu/config"
    fi
   
}

readConfig() {
    source "$HOME"/.izulu/config
}

# set default variables
TEMPERATURE_GRAVITY="SouthWest"
TEMPERATURE_MARGIN="+10+20"
INTERVAL=900

checkConfig
readConfig

# Read given script arguments
while [[ $# -gt 0 ]] ; do
    parm="$1"
    shift

    case "$parm" in
        -c | --city)
            CITY="$1"
            ;;
        -l | --latitude)
            LATITUDE="${1%:*}"
            LONGITUDE="${1#*:}"
            ;;
        -d | --daemon)
            DAEMON=TRUE
            ;;
        -i | --icon)
            TRAYICON=TRUE
            ;;
        -n | --night)
            NIGHT=TRUE
            ;;
        -o | --osd)
            OSD=TRUE
            ;;
        -f | --forecast)
            FORECAST=TRUE
            ;;
        -t | --temperature)
            TEMPERATURE=TRUE
            ;;
        -tg | --temperature-gravity)
            TEMPERATURE_GRAVITY="$1"
            ;;
        -tm | --temperature-margin)
            TEMPERATURE_MARGIN="$1"
            ;;
        -co | --compat)
            if [[ "$1" -eq "unity" ]];then
                TEMPERATURE_GRAVITY="NorthEast"
                TEMPERATURE_MARGIN="+10+40"
            fi
            ;;
        --help)
            echo "-l LAT:LON, --latitude LAT:LON:
    Give the current position as latitude and longitude
-d, -daemon:
    Enable daemon-mode, check the weather every 15 minutes.
-n, --night:
    Set another wallpaper at night.
-o, --osd:
    Send a notification when weather changes.
-f, --forecast
    Add images showing the weather forecast.
-t, --temperature
    Show the temperature.
-i, --icon
    Show a tray icon with the current weather data.
-tg gravity, --temperature-gravity gravity
    Set the gravity anchor of the temperature display. Possible choices are NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast. See also http://www.imagemagick.org/script/command-line-options.php#gravity
-tm margin, --temperature-margin margin
    Set the margin the temperature display shall have from the screen borders. The format for margin is +x+y, for example '+10+30'.
-co desktop, --compat desktop
    Set several default parameters for compatibility with the defaults of a specific desktop environment. The sole possible value for desktop so far is 'unity', and it will move the temparature display to the upper right corner."
            exit 0
            ;;

        --version)
            echo "izulu 2.1.0"
            exit 0
            ;;
    esac
done

TEXTDOMAIN="izulu"
TEXTDOMAINDIR="/usr/share/locale/"
export TEXTDOMAIN
export TEXTDOMAINDIR
IZULU_PID=$$

if [ "$WPCOMMAND" == "" ];then
    WPCOMMAND="$(getWPCommand)"
fi

if [ -z "$LATITUDE" ];then
    setCoordinates
    if [ "$LATITUDE" == "" ];then
        echo "Error: Your location is not discoverable. Please specify a city with 'izulu -l LAT:LON'." >&2
        exit 1
    fi
fi

setWeatherData
chooseWallpaper "$(getWeather)"

daemon() {
    while true;do
        if [[ -z "$INTERVAL" ]];then
                    # 900 seconds
            INTERVAL=900
        fi
        
        sleep $INTERVAL

        setWeatherData
        chooseWallpaper "$(getWeather)"
    done
}

if [ "$DAEMON" == "TRUE" ];then
    daemon
fi

